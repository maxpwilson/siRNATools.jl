var documenterSearchIndex = {"docs":
[{"location":"man/act_guide/#Activity-Guide","page":"Activity Guide","title":"Activity Guide","text":"","category":"section"},{"location":"man/spec_guide/#Specificity-Guide","page":"Specificity Guide","title":"Specificity Guide","text":"","category":"section"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"How to use specificity module of siRNATools","category":"page"},{"location":"man/spec_guide/#Initial-Setup-/-Updates","page":"Specificity Guide","title":"Initial Setup / Updates","text":"","category":"section"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"This only needs to be done once after installing siRNATools","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"After installing siRNATools the default PATH directory must be set up first using the Update_Path function.  The function takes a string as its argument, and each folder must be separated by '\\\\'. The PATH directory is persistent so only needs to be updated once.  Package must be rebuilt after PATH is updated.  ","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> using siRNATools\n\njulia> siRNATools.Specificity.Update_Path(\"C:\\\\My\\\\PATH\\\\folder\")\n\njulia> using Pkg; Pkg.build(\"siRNATools\")","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"Next the reference sequence must be downloaded using the download_RefSeq function.  All files and sub-directories required will be automatically created in the PATH folder.  The current default is set to 7 files, but this has changed in the past.  You can check the files at ftp://ftp.ncbi.nlm.nih.gov/refseq/Hsapiens/mRNAProt/.  ","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> using siRNATools\n\njulia> siRNATools.Specificity.download_RefSeq()","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"After the reference sequence raw files are downloaded they have to be processed into a single readable CSV file using the process_RefSeq function.  Once again all necessary files and sub-folders are created automatically, and the default number of files is 7.","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> siRNATools.Specificity.process_RefSeq()","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"Finally the correct datatypes have to be saved as their own BSON files by save_RefSeq.  This could take a significant amount of time. ","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> siRNATools.Specificity.save_RefSeq()","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"If all of this is done correctly then when rebuilding siRNATools there should no longer be any error messages when using siRNATools.  If the reference sequence needs to be updated repeat previous steps.  If the ncbi has updated the reference sequence the previous steps will save the old files in a folder with the date they were downloaded and create a new set.","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> using Pkg; Pkg.build(\"siRNATools\")\n\njulia> using siRNATools","category":"page"},{"location":"man/spec_guide/#Calculating-Specificity","page":"Specificity Guide","title":"Calculating Specificity","text":"","category":"section"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"First you will need a CSV file containing all of the AntiSense strand sequences you want to calculate specificity for.  They all must be in a single column with the first row being the label for that column.  Sequences must be 5'->3' and contain only A, C, G, and U characters.  ","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"Next you will load the CSV file into julia using the CSV and DataFrames packages.  In this example the dataframe is saved to variable df and the row Antisense contains the relevant information.  ","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> using CSV, DataFrames\n\njulia> df = CSV.read(\"C:\\\\my\\\\csv\\\\path\\\\file.csv\") |> DataFrame\n100×4 DataFrame\n│ Row  │ Sense                 │ Antisense             │\n│      │ String                │ String                │\n├──────┼───────────────────────┼───────────────────────┼\n│ 1    │ AUGGCCCUCCCGACACCCUCG │ CGAGGGUGUCGGGAGGGCCAU │\n.\n.\n.","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"Finally, use the Calculate_Specificity function to calculate the specificity score and gene mismatch information.  Using df.Antisense will calculate for all strands in the antisense column of our dataframe.  Fewer can be picked out using the syntax df.Antisense[i:j] which will calculate for only strands i through j.  The target gene can also be specified and will then be left out of the calculation.  Here we save the resulting dataframe as df_results.  ","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> using siRNATools\n\njulia> df_results = siRNATools.Specificity.Calculate_Specificity(df.Antisense, \"EXAMPLE1\")\n100×7 DataFrame\n│ Row │ Pattern               │ Zero  │ One   │ Two   │ Three │ Four  │ Score   │\n│     │ String                │ Int64 │ Int64 │ Int64 │ Int64 │ Int64 │ Float64 │\n├─────┼───────────────────────┼───────┼───────┼───────┼───────┼───────┼─────────┤\n│ 1   │ CGAGGGUGUCGGGAGGGCCAU │ 0     │ 3     │ 55    │ 452   │ 2894  │ 1       │\n.\n.\n.","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"The data can then be saved as another CSV file using the CSV package and the dataframe df_results from the previous step.","category":"page"},{"location":"man/spec_guide/","page":"Specificity Guide","title":"Specificity Guide","text":"julia> CSV.write(\"C:\\\\my\\\\results\\\\path\\\\data.csv\", df_results)","category":"page"},{"location":"man/act_index/#Activity-Functions","page":"Activity Functions","title":"Activity Functions","text":"","category":"section"},{"location":"#siRNATools","page":"Home","title":"siRNATools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Package with tools for siRNA","category":"page"},{"location":"","page":"Home","title":"Home","text":"Package was made using Julia 1.3.0.  ","category":"page"},{"location":"#Specificity","page":"Home","title":"Specificity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/spec_guide.md\",\n    \"man/spec_index.md\"\n]","category":"page"},{"location":"#Activity","page":"Home","title":"Activity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/act_guide.md\",\n    \"man/act_index.md\"\n]","category":"page"},{"location":"man/spec_index/#Specificity-Functions","page":"Specificity Functions","title":"Specificity Functions","text":"","category":"section"},{"location":"man/spec_index/","page":"Specificity Functions","title":"Specificity Functions","text":"","category":"page"},{"location":"man/spec_index/#Reference-Sequence","page":"Specificity Functions","title":"Reference Sequence","text":"","category":"section"},{"location":"man/spec_index/","page":"Specificity Functions","title":"Specificity Functions","text":"siRNATools.Specificity.Update_Path\nsiRNATools.Specificity.ReferenceSequence\nsiRNATools.Specificity.get_refseq_pos\nsiRNATools.Specificity.encode_refseq\nsiRNATools.Specificity.decode_refseq\nsiRNATools.Specificity.decode_refseq_partial\nsiRNATools.Specificity.download_RefSeq\nsiRNATools.Specificity.process_RefSeq\nsiRNATools.Specificity.save_RefSeq","category":"page"},{"location":"man/spec_index/#siRNATools.Specificity.Update_Path","page":"Specificity Functions","title":"siRNATools.Specificity.Update_Path","text":"Update_Path(::String)\n\nUpdates default value for constant PATH.  All created or downloaded files are put into PATH directory or sub-directory created by that function. Persistent on each computer, but needs to be updated after install before calculating specificity.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.ReferenceSequence","page":"Specificity Functions","title":"siRNATools.Specificity.ReferenceSequence","text":"Structure for reference sequences.  Compresses RNA data into 2 bits of information from the 8 of a normal character string.  Can only use bases A, C, G, U.\n\nA => 00\nC => 01\nG => 10\nU => 11\n\n\n\n\n\n","category":"type"},{"location":"man/spec_index/#siRNATools.Specificity.get_refseq_pos","page":"Specificity Functions","title":"siRNATools.Specificity.get_refseq_pos","text":"get_refseq_pos(::ReferenceSequence, ::Int)\n\nFunction to retrieve bit value of base at specificied position in a reference sequence.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.encode_refseq","page":"Specificity Functions","title":"siRNATools.Specificity.encode_refseq","text":"encode_refseq(::String) :: ReferenceSequence\n\nFunction that takes a string containing only A, C, G, and U and encodes it into a ReferenceSequence type\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.decode_refseq","page":"Specificity Functions","title":"siRNATools.Specificity.decode_refseq","text":"decode_refseq(::ReferenceSequence) :: String\n\nFunction takes a ReferenceSequence type and returns a String containing the RNA bases.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.decode_refseq_partial","page":"Specificity Functions","title":"siRNATools.Specificity.decode_refseq_partial","text":"decode_refseq_partial(::ReferenceSequence, ::UnitRange) :: String\n\nFunction which takes a ReferenceSequence type and outputs specificied range of bases as a String.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#Genome-Search","page":"Specificity Functions","title":"Genome Search","text":"","category":"section"},{"location":"man/spec_index/","page":"Specificity Functions","title":"Specificity Functions","text":"siRNATools.Specificity.Calculate_Specificity\nsiRNATools.Specificity.reverse_complement\nsiRNATools.Specificity.calculate_Peq\nsiRNATools.Specificity.motif_to_transcript_match\nsiRNATools.Specificity.find_match_sequences\nsiRNATools.Specificity.mismatch_positions\nsiRNATools.Specificity.find_genome_matches\nsiRNATools.Specificity.compress_genome_matches\nsiRNATools.Specificity.final_calc","category":"page"},{"location":"man/spec_index/#siRNATools.Specificity.Calculate_Specificity","page":"Specificity Functions","title":"siRNATools.Specificity.Calculate_Specificity","text":"Calculate_Specificity(patterns, excluded_gene=\"\", rg=2:18, verbose=true) :: DataFrame\n\nFunction takes as input the pattern to be searched against the genome, the excluded gene to be ignored, the range of pattern being used, and a boolean which controls whether progress bars will be shown.  Output is a DataFrame with a column for the pattern, the number of genes with minimum mismatch distance of 0-4 and the specificity score.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.reverse_complement","page":"Specificity Functions","title":"siRNATools.Specificity.reverse_complement","text":"reverse_complement(::String) :: String\n\nTakes the reverse complement of an RNA string\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.calculate_Peq","page":"Specificity Functions","title":"siRNATools.Specificity.calculate_Peq","text":"calculate_Peq(::String) :: Array{UInt64, 1}\n\nTakes as input an RNA strand and translates it into an array of Unsigned Integers each one representing one letter and each bit referring to a position.   Used as a pre-processing step for Myers searching algorithm.  Maximum length of searched pattern is 64.\n\nExample\n\nAACGCU becomes [110000, 001010, 000100, 000001]\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.motif_to_transcript_match","page":"Specificity Functions","title":"siRNATools.Specificity.motif_to_transcript_match","text":"motif_to_transcript_match(Peq::Array{Unit64, 1}, m::Int64, refseq::ReferenceSequence, min_K::Int) :: Array{Tuple{UInt64, UInt64}}\n\nTakes as input Peq calculated in calculate_Peq, m = the length of the pattern to search for, the ReferenceSequence to search in, and min_k =  the maximum distance to output.  Implements the string matching algorithm described in A Fast Bit-Vector Algorithm for Approximate String Matching Based on Dynamic Programming by Gene Myers.  Output is a tuple of all Levenshtein distances less than min_k and their positions in refseq.   \n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.find_match_sequences","page":"Specificity Functions","title":"siRNATools.Specificity.find_match_sequences","text":"find_match_sequences(motif::String, sequence::String, mismatches::Int) :: Array{String, 1}\n\nFunction takes as input a motif, sequence, and number of mismatches to search for.  Output is an array of all substrings of sequence which have a  Hamming distance of exactly mismatches to motif. \n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.mismatch_positions","page":"Specificity Functions","title":"siRNATools.Specificity.mismatch_positions","text":"mismatch_positions(::String, ::String) :: Array{Int, 1}\n\nFunction returns an array of all positions in which strings used as input differ.  Strings must be the same length.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.find_genome_matches","page":"Specificity Functions","title":"siRNATools.Specificity.find_genome_matches","text":"find_genome_matches(pattern::String, excluded_gene::String = \"\", verbose::Bool = true, minimum_matches = 5) :: Array{Tuple{String, Int64}}\n\nFunction takes as input a pattern to search the genome for, excludedgene to exclude the gene of interest from the search, verbose set to true displays a progress bar showing progress of search, and minimum\\matches which is the amount of mismatches searched for + 1.  Output is an array of tuples of transcript names and the lowest Hamming distance found to the pattern within that transcript.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.compress_genome_matches","page":"Specificity Functions","title":"siRNATools.Specificity.compress_genome_matches","text":"compress_genome_matches(::Array{Tuple{String, Int64}}) :: Dict{String, Array{Int64, 1}}\n\nFunction takes as input the output of find_genome_matches and collapses it into a dictionary of Gene names and an array of all lowest Hamming mismatch  of the transcripts of that gene.\n\n\n\n\n\n","category":"function"},{"location":"man/spec_index/#siRNATools.Specificity.final_calc","page":"Specificity Functions","title":"siRNATools.Specificity.final_calc","text":"final_calc(pattern::String, raw_data::Array{Tuple{String, Int64}}, compressed_data::Dict{String, Array{Int64, 1}})\n\nFunction takes as input the pattern being searched for, the raw_data from find_genome_matches, and the compressed data from compress_genome_matches. Ouput is a Tuple containing the mismatch_counts dictionary which adds up the number of genes with a minimum Hamming distance of 0-4, and the specificity score.\n\n\n\n\n\n","category":"function"},{"location":"man/install_guide/#Installation-Guide","page":"Installation Guide","title":"Installation Guide","text":"","category":"section"},{"location":"man/install_guide/","page":"Installation Guide","title":"Installation Guide","text":"First download and install Julia from here if not already installed","category":"page"},{"location":"man/install_guide/","page":"Installation Guide","title":"Installation Guide","text":"Next start Julia and type ] into the command line.  The screen should look like below.","category":"page"},{"location":"man/install_guide/","page":"Installation Guide","title":"Installation Guide","text":"(v1.3) Pkg> \n","category":"page"},{"location":"man/install_guide/","page":"Installation Guide","title":"Installation Guide","text":"Next add the dependencies as shown below.","category":"page"},{"location":"man/install_guide/","page":"Installation Guide","title":"Installation Guide","text":"(v1.3) Pkg> add CSV, DataFrames, StatsBase, StringDistances, GZip, ProgressMeter, BSON, Flux, Query, PyCall","category":"page"},{"location":"man/install_guide/","page":"Installation Guide","title":"Installation Guide","text":"Finally install the package.","category":"page"},{"location":"man/install_guide/","page":"Installation Guide","title":"Installation Guide","text":"(v1.3) Pkg> add https://github.com/maxpwilson/siRNATools.jl.git\n","category":"page"}]
}
